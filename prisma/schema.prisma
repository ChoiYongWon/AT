// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
// }


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}



model User {
  id            String    @id @default(cuid())
  name          String?
  at_id         String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  maps          Map[]
  spots         Spot[]
  images        Image[]
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  @@map("user")
}

model Map {
  id            String @id @default(cuid())
  name          String
  userId        String
  spots         Spot[]

  created_at    DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("map")
}


model Spot {
  id                    String @id @default(cuid())
  userId                String
  mapId                 String

  images                Image[]

  title                 String
  body                  String
  address               String
  primary_address       String
  secondary_address     String
  view_count            Int @default(0)
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  map Map @relation(fields: [mapId], references: [id], onDelete: Cascade)

  @@map("spot")
}


model Image {
  id                    String @id @default(cuid())
  userId                String
  spotId                String
  url                   String
  sequence              Int
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)

  @@map("image")
}

